<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Taha Portfolio</title>
    <link>/</link>
    <description>Recent content on Taha Portfolio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 05 Aug 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>About me</title>
      <link>/about/</link>
      <pubDate>Sat, 24 Aug 2024 17:51:42 +0000</pubDate>
      <guid>/about/</guid>
      <description>About Me Hi there! I&amp;rsquo;m a versatile developer with experience in various programming languages and frameworks. Here&amp;rsquo;s a brief overview of my skills and expertise:&#xA;Languages and Frameworks Go: Experienced Go developer Python: Proficient in multiple Python frameworks Flask Django Django Rest Framework (DRF) Celery JavaScript/TypeScript: React Native: Some experience in mobile app development NextJS: Familiar with this React framework for building web applications PHP: Laravel: Experience with this popular PHP framework Other Skills Full-stack development API design and implementation Asynchronous task processing Mobile and web application development GitHub You can find my projects and contributions on GitHub: taha-cmyc</description>
    </item>
    <item>
      <title>Using Celery with Django for Asynchronous Tasks</title>
      <link>/posts/django-celery-2024/</link>
      <pubDate>Mon, 05 Aug 2024 00:00:00 +0000</pubDate>
      <guid>/posts/django-celery-2024/</guid>
      <description>Introduction Celery is a powerful, distributed task queue that can be used with Django to handle asynchronous tasks and background processing. This guide will walk you through setting up Celery with Django and demonstrate how to use it effectively in your projects.&#xA;Table of Contents Installation Configuration Creating Tasks Running Tasks Periodic Tasks Monitoring Best Practices Installation First, you need to install Celery and its dependencies:&#xA;pip install celery redis django-celery-results We&amp;rsquo;ll use Redis as our message broker, but you can also use RabbitMQ or other brokers supported by Celery.</description>
    </item>
    <item>
      <title>Building High-Performance Backends with Gin in Go</title>
      <link>/posts/gin-2024/</link>
      <pubDate>Fri, 02 Aug 2024 00:00:00 +0000</pubDate>
      <guid>/posts/gin-2024/</guid>
      <description>Introduction Gin is a web framework for Go that focuses on high performance and productivity. It&amp;rsquo;s perfect for building fast, scalable backend services. This guide will walk you through the basics of using Gin to create a performant backend.&#xA;Table of Contents Installation Basic Setup Routing Handling Requests Middleware Grouping Routes Performance Tips Installation To get started with Gin, you first need to install it:&#xA;go get -u github.com/gin-gonic/gin Basic Setup Here&amp;rsquo;s a basic example of setting up a Gin server:</description>
    </item>
  </channel>
</rss>
